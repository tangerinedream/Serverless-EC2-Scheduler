AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Stack creates persistent regional Resources for the Serverless Scheduler.


Parameters:
  CodePipelineBucketName:
    Description: Name of bucket to use for temp artifacts usage.  Region will be appended.
    Type: String
    Default: serverless-scheduler-codepipeline-bucket

  SNSTopicName:
    Description: Name of the SNS Topic the serverless EC2 scheduler will publish on.  Region will be appended.
    Type: String
    Default: ServerlessScheduler


  RolePathNamespace:
    Description: The namespacing within the role arn
    Type: String
    Default: serverless-scheduler


Outputs:
  CodePipelineArtifactsBucketName:
    Description: The Bucket Name ARN for Artifacts
    Value: !Ref CodePipelineArtifactBucket

  
  SchedulerSNSTopicName:
    Description: The SNS Topic Name
    Value: !GetAtt SchedulerSNSTopic.TopicName


  CodePipelineRole:
    Description: The role under which the CodePipeline for Serverless EC2 Scheduler is executed
    Value:
      !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodePipelineRole'

  CodeBuildRole:
    Description: The role under which the CodeBuild for Serverless EC2 Scheduler is built
    Value:
      !GetAtt CodeBuildRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildRole'

  RolePathNamespace:
    Description: The namespacing within the role name
    Value:
      !Ref RolePathNamespace
    Export:
      Name: !Sub '${AWS::StackName}-RolePathNamespace'

  LambdaRole:
    Description: The role under which the Lambda will run
    Value:
      !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'

Resources:

  # ------------------------------------------
  # SNS Topic
  # ------------------------------------------
  SchedulerSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: SNS Topic
      TopicName: !Join
      - '-'
      - - !Ref SNSTopicName
        - !Sub '${AWS::Region}'


  # ------------------------------------------
  # CodePipeline's S3 bucket for use
  # ------------------------------------------
  CodePipelineArtifactBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - '-'
        - - !Ref CodePipelineBucketName
          - !Sub '${AWS::Region}'


  CodePipelineArtifactBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false

  # ------------------------------------------
  # DynamoDB Tables
  # ------------------------------------------
  SchedulerDynamoDBWorkloadTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: WorkloadSpecification
      AttributeDefinitions:
        - AttributeName: SpecName
          AttributeType: S
      KeySchema:
        - AttributeName: SpecName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key : ApplicationName
          Value : Serverless-Scheduler

  SchedulerDynamoDBTierTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: TierSpecification
      AttributeDefinitions:
        - AttributeName: SpecName
          AttributeType: S
        - AttributeName: TierTagValue
          AttributeType: S
      KeySchema:
        - AttributeName: SpecName
          KeyType: HASH
        - AttributeName: TierTagValue
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key : ApplicationName
          Value : Serverless-Scheduler

  SchedulerDynamoDBWorkloadStateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: WorkloadState
      AttributeDefinitions:
        - AttributeName: Workload
          AttributeType: S
      KeySchema:
        - AttributeName: Workload
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key : ApplicationName
          Value : Serverless-Scheduler


  # ------------------------------------------
  # Service Roles
  #   See: https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-cloudformation-github.html
  # ------------------------------------------
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: !Join
            - ''
            - - '/'
              - !Ref RolePathNamespace
              - '/'
      Policies:
        - PolicyName: !Sub 'SchedulerCodePipelineServicePolicy-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'

              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'

              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'

              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !Join
                  - ''
                  - - !Sub 'arn:aws:iam::${AWS::AccountId}:role/'
                    - !Ref RolePathNamespace
                    - /*
#                Condition:
#                  StringEquals:
#                    'iam:PassedToService': 'codepipeline.amazonaws.com'

              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                Resource: '*'

  # ------------------------------------------
  # CodeBuild Service Role
  # ------------------------------------------
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: !Join
        - ''
        - - '/'
          - !Ref RolePathNamespace
          - '/'
      Policies:
      - PolicyName: !Sub 'SchedulerCodeBuildServicePolicy-${AWS::Region}'
        PolicyDocument:
          Version: 2012-10-17
          Statement:

          - Effect: Allow
            Action:  # TODO: Change Actions to Least Privilege
              - 'cloudwatch:*'
              - 's3:*'
              - 'sns:*'
              - 'cloudformation:*'
            Resource:
              '*'

          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource:
              !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'

          # The below are required by the embedded/generated SAM Cloudformation Stack - SchedulerEndpointStack
          - Effect: Allow
            Action:
              - 'lambda:*'
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:scheduler-*'

          - Effect: Allow
            Action:
              - 'codedeploy:*'
            Resource:
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:SchedulerEndpointStack*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:SchedulerEndpointStack*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*'


          - Effect: Allow
            Action:
              - 'apigateway:*'
            Resource:
              - !Sub 'arn:aws:apigateway:${AWS::Region}::*'

          - Effect: Allow
            Action:
              - 'iam:PassRole'   # Permission to Assign Roles below
            Resource:
              Fn::GetAtt:
                - LambdaRole
                - Arn

          - Effect: Allow
            Action:
              - 'iam:PassRole'   # Permission to Assign Roles below
              - 'iam:CreateRole'
              - 'iam:DeleteRole'
              - 'iam:GetRole'
              - 'iam:AttachRolePolicy'
              - 'iam:DetachRolePolicy'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/SchedulerEndpointStack*'

            
#            Resource: !Join
#              - '/'
#              - - !Sub 'arn:aws:iam::${AWS::AccountId}:role'
#                - !Ref RolePathNamespace
#                - !Ref LambdaRole
#TODO: Should this be the Short Name instead?

#              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/SchedulerEndpointStack*'
#            Condition:
#              StringEquals:
#                'iam:PassedToService': 'codebuild.amazonaws.com'

  # ------------------------------------------
  # Lambda Service Role
  # ------------------------------------------
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: !Join
        - ''
        - - '/'
          - !Ref RolePathNamespace
          - '/'
      Policies:
      - PolicyName: !Sub 'SchedulerLambdaPolicy-${AWS::Region}'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:ListTagsOfResource
                - dynamodb:ListBackups
                - dynamodb:ListGlobalTables
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WorkloadSpecification'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TierSpecification'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WorkloadState'

            - Effect: Allow
              Action:
                - dynamodb:ListTables   # This action requires resource '*'
              Resource:
                "*"

            - Effect: Allow
              Action:
                - sns:publish
                - sns:CreateTopic
              Resource:
                - !Ref SchedulerSNSTopic


            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:StartInstances
                - ec2:ModifyInstanceAttribute
                - ec2:DescribeVolumes
                - ec2:StopInstances
                - ec2:DescribeVolumeAttribute
                - ec2:DescribeInstanceCreditSpecifications
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeTags
                - ec2:DescribeVpcs
                - elasticloadbalancing:DescribeLoadBalancers
              Resource: "*"

            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                'arn:aws:logs:*:*:*'

